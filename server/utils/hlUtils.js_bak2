
// output service configuration
var config = require('config');
var assert = require('assert');

var exec = require('ssh-exec');
var hl_user = config.get('out-service.hl_user');
var hl_pass = config.get('out-service.hl_password');
var hl_ip = config.get('out-service.hl_ip');
var hl_channel = config.get('out-service.hl_default_channel');
var hl_chaincode = config.get('out-service.hl_default_chaincode');
var hl_dockerid = config.get('out-service.hl_default_dockerid');
var hl_script_path = config.get('out-service.hl_script_path');
var hl_peer = config.get('out-service.hl_default_peer');

/* Hyperledger Fabric - PUT */
var hl_put = exports.hl_put =  function(myobj, callback) {	
	console.log('invoking ssh');    
	_put(myobj, function(res){
	      return callback(res);
	  });
}

function _put (myobj, callback){
        console.log('Executing put');

         //peer info
        var peer = undefined;
        var peer_ip = undefined;
        var peer_user = undefined;
        var peer_pass = undefined;

        var channel = undefined;
        var chaincodeName = undefined;
        if (myobj.peer != undefined || myobj.peer == ''){
          console.log("############INIT###############");
          peer = myobj.peer;
          //take the dockerid cli, username, id, password related to the peer inserte
          dockerId = config.get("out-service.hl_peer_"+String(peer)+"_cli_id");
          peer_ip = config.get("out-service.hl_peer_"+String(peer)+"_ip");
          peer_user = config.get("out-service.hl_peer_"+String(peer)+"_user");
          peer_pass = config.get("out-service.hl_peer_"+String(peer)+"_password");
	  console.log("############ "+"user:"+peer_user+" Pass:"+peer_pass+" IP:"+peer_ip+" ###############");
        }
        else{
          console.log("You are using DEFAULT PEER");
          peer_ip = hl_ip;
          peer_user = hl_user;
          peer_pass = hl_pass;
          peer = hl_peer;       //default one
          dockerId = hl_dockerid;       //default one
        }

        if (myobj.channel != undefined || myobj.channel == '' ){
          channel = myobj.channel;
        }
        else{
          console.log("You are using DEFAULT CHANNEL");
          channel = hl_channel;         //default one
        }

        if (myobj.chaincodeName != undefined || myobj.chaincodeName == '' ){
          chaincodeName = myobj.chaincodeName;
        }
        else{
          console.log("You are using DEFAULT CHAINCODE");
          chaincodeName = hl_chaincode;     //default one
        }

        var key = myobj.key;
        var value = myobj.value;
	console.log("###"+key+" "+value+"###########");
        var command = hl_script_path + 'hl_put.sh ' +' '+ peer +' '+ channel +' '+ chaincodeName +' '+ key +' '+ value +' '+ dockerId;
        console.log('command: ' + command);

        // example call script on fabric vm: ./hl_put_test.sh 0 mychannel keyValueStore k10 v10 1db78d8$
        try {
	  exec(command, {
            user: peer_user,
            host: peer_ip,
            password: peer_pass
          }).pipe(process.stdout);
	} catch(e) {
	    console.log(e);
	}

        console.log('Put succeeded');
        return callback("ok");
}

//function _put (myobj, callback){
//	console.log('Executing put');
//	
//	var peer = myobj.peer;
//	var key = myobj.key;
//	var value = myobj.value;
//	var command = hl_script_path + 'hl_put.sh ' +' '+ hl_endorser_peer +' '+ hl_channel +' '+ hl_chaincode +' '+ key +' '+ value +' '+ hl_dockerid;
//	console.log('command: ' + command);
//	
//	// example call script on fabric vm: ./hl_put_test.sh 0 mychannel keyValueStore k10 v10 1db78d826131
//	exec(command, {
//	  user: hl_user,
//	  host: hl_ip,
//	  password: hl_pass
//	}).pipe(process.stdout)
//	
//	console.log('Put succeeded');
//	return callback("ok");

//}


/* Hyperledger Fabric - INVOKE */
var hl_invoke = exports.hl_invoke =  function(myobj, callback) {
	console.log('invoking ssh');
	_invoke(myobj, function(res){
	      return callback(res);
	  });
}

function _invoke (myobj, callback){
	console.log('Executing invoke');
	
	//peer info
	var peer = undefined;
	var peer_ip = undefined;
	var peer_user = undefined;
	var peer_pass = undefined;

	var channel = undefined;
	var chaincodeName = undefined;
	if (myobj.peer != undefined || myobj.peer == ''){
	  console.log("############INIT###############");
	  peer = myobj.peer;
	  console.log("############ "+peer+" ###############");
	  //take the dockerid cli, username, id, password related to the peer inserted
	  dockerId = config.get('out-service.hl_peer_'+peer+'_cli_id');
	  peer_ip = config.get('out-service.hl_peer_'+peer+'_ip');
	  peer_user = config.get('out-service.hl_peer_'+peer+'_user');
	  peer_pass = config.get('out-service.hl_peer_'+peer+'_password');
	  console.log("############ "+"user:"+peer_user+" Pass:"+peer_pass+" IP:"+peer_ip+" #####");
	}
	else{
	  console.log("You are using DEFAULT PEER");
	  peer_ip = hl_ip;
	  peer_user = hl_user;
	  peer_pass = hl_pass;
	  peer = hl_peer;	//default one
	  dockerId = hl_dockerid;	//default one
	}

	if (myobj.channel != undefined || myobj.channel == '' ){
	  channel = myobj.channel;
	}
	else{
	  console.log("You are using DEFAULT CHANNEL");
	  channel = hl_channel;		//default one
	}

        if (myobj.chaincodeName != undefined || myobj.chaincodeName == '' ){
	  chaincodeName = myobj.chaincodeName;
	}
	else{
	  console.log("You are using DEFAULT CHAINCODE");
	  chaincodeName = hl_chaincode;	//default one
	}

	var fcn = myobj.fcn;
	var args = myobj.args;

	//merge of the two strings in myobj -> e.g. "put,key,val"
	var fcnargs = fcn+','+args;
	var command = hl_script_path + 'hl_invoke.sh' +' '+ peer +' '+ channel +' '+ chaincodeName +' '+fcnargs+ ' '+ dockerId;
	console.log('command: ' + command);

	// example call script on fabric vm: ./hl_put_test.sh 0 mychannel keyValueStore k10 v10 1db78d826131
	try {
	  exec(command, {
            user: peer_user,
            host: peer_ip,
            password: peer_pass
          }).pipe(process.stdout);
        } catch(e) {
          console.log(e);
	}

	console.log('Invoke succeeded');
	//
	return callback("ok");

}


/* Hyperledger Fabric - GET */
var hl_get = exports.hl_get =  function(_id, callback) {	
    MongoClient.connect(url, function(err, db) {
	  assert.equal(null, err);
      console.log("Connected successfully to mongodb");
	  _get(_id, db, function(res){
	      db.close();
 	  	  return callback(res);
	  });
    });
}

function _get (_id, db, callback){
	console.log('Executing get');
	var collection = db.collection(db_collection);
	// Insert a document
	collection.findOne(_id, function(err, res){
    	if (err) return;
		try{
			console.log('Get succeeded! Value: ' + res.value);
			return callback(res.value);
		} catch (err) {
			return callback(new Error());
		}
   })
}


/* Hyperledger Fabric - DELETE */
var hl_delete = exports.db_delete =  function(myobj, callback) {	
    MongoClient.connect(url, function(err, db) {
	  assert.equal(null, err);
      console.log("Connected successfully to mongodb");
	  _delete(myobj, db, function(res){
	      db.close();
 	  	  return callback(res);
	  });
    });
}

function _delete (myobj, db, callback){
	console.log('Executing delete');
	var collection = db.collection(db_collection);
	// Insert a document
	collection.deleteOne(myobj, function(err, res){
    	if (err){
    		return new Error();
    	}
		console.log('Delete succeeded');
		return callback("ok");
   })
}
